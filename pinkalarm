#!/usr/bin/python2

import sys, os
from signal import SIGINT
import time
# import pygame in main function.

# Set working directory to the directory this script is in. Makes life easy.
try:
    os.chdir(os.path.split(__file__)[0])
except OSError: pass

pink_noise_filename = "./pink.wav"
alarm_sound_filename = "./alarm.ogg" # Kevin Macleod - Living Voyage
keybind_filename = "./keybinds.txt"
volume_adjust_step = 1/16.

# Milliseconds taken to fade background noise before alarm sound.
noise_alarm_fade_ms = 6000

# Milliseconds taken to fade other noises before playing text-to-speech sounds.
speak_fade_ms = 250

# Command line arguments for text to speech
text_to_speech_args = ("espeak",)
# text_to_speech_args = ('spd-say', '-e')
# text_to_speech_args = \
#     ("./flite/bin/flite", "-voice", "awb", "/dev/stdin", "play")

def how_far_between(x, start, end):
    """Computes how far `x` is between `start` and `end`. Clamped to
between 0 and 1. Handles end < start correctly. Reverse engineer the
function if you want a more mathematically-rigorous explanation.

    """
    return min(1, max(0, float(x - start) / (end - start)))

class Alarm(object):
    """Object responsible for keeping track of the alarm clock set time
(if any), processing user input pertaining to setting the alarm clock
(see input_digit and confirm_input), and checking if the alarm
clock should ring.

    """
    __slots__ = [
        # Time that the alarm clock should ring formatted as "hh:mm"
        # string.  None if the alarm clock is not set. I store hh:mm
        # time rather than epoch time and use string comparisons to
        # see if the alarm should ring partially so that we "do the
        # right thing" in tricky circumstances like timezone or
        # daylight-saving time changes. :-/
        "_alarm_hhmm_time",
        
        # Whether the hh:mm time string should be interpreted as local (True)
        # or zulu time (False).
        "_alarm_in_local_time",
        
        # The value that alarm_in_local_time shall take the next time
        # that the alarm clock is set.
        "_next_alarm_in_local_time",
        
        # Last four digits input on keyboard (through input_digit method).
        # Used to set the alarm clock time.
        "_last_four_digits",
    ]
    
    def __init__(self):
        self._alarm_hhmm_time = None
        self._alarm_in_local_time = True
        self._next_alarm_in_local_time = True
        self._last_four_digits = "0000"
    
    def input_digit(self, digit):
        """Process one digit of user input, passed as a single character '0'
through '9'."""
        if digit not in "0123456789":
            raise ValueError("%r is not a digit character 0-9" % digit)
        self._last_four_digits = self._last_four_digits[-3:] + digit
    
    def confirm_input(self, sound_thing):
        """Set the alarm clock time using the last four digits input, in hh:mm
order. Announce this on the sound_thing."""
        assert len(self._last_four_digits) == 4
        assert type(self._last_four_digits) is str
        # It's internal data; don't care about subclassing/unicode/isinstance.
        
        # Remember the time the alarm clock should go off at.
        self._alarm_hhmm_time = "%s%s:%s%s" % tuple(self._last_four_digits)
        self._alarm_in_local_time = self._next_alarm_in_local_time
        
        # Implicitly replace 24th hour with 0th hour.
        if self._alarm_hhmm_time.startswith('24'):
            self._alarm_hhmm_time = '00' + self._alarm_hhmm_time[2:]

        sound_thing.speak(self.get_alarm_time_text())
    
    def confirm_input_hour(self, sound_thing):
        """Set the alarm clock time using the last two digits input, in hh:00
format. Announce this on the sound_thing."""
        assert len(self._last_four_digits) == 4
        assert type(self._last_four_digits) is str
        # It's internal data; don't care about subclassing/unicode/isinstance.
        
        # Remember the time the alarm clock should go off at.
        self._alarm_hhmm_time = "%s%s:00" % tuple(self._last_four_digits[2:])
        self._alarm_in_local_time = self._next_alarm_in_local_time
        
        # Implicitly replace 24th hour with 0th hour.
        if self._alarm_hhmm_time.startswith('24'):
            self._alarm_hhmm_time = '00' + self._alarm_hhmm_time[2:]

        sound_thing.speak(self.get_alarm_time_text())
    
    def cancel(self, sound_thing):
        """Cancel the alarm set, announcing this on the sound_thing."""
        self._alarm_hhmm_time = None
        sound_thing.speak("Alarm cancelled.")
    
    def get_alarm_time_text(self):
        """Get the string that announces the time that the alarm clock is
set."""
        if not self._alarm_hhmm_time:
            return "No alarm."
        
        if self._alarm_in_local_time:
            local_or_zulu = "local time"
        else:
            local_or_zulu = "zulu"
        
        numbers = text_from_hhmm_string(self._alarm_hhmm_time)
        
        maybe_warn = ""
        if not self._hhmm_string_appears_valid():
            maybe_warn = "Alarm time appears invalid. "
        
        return "%sAlarm set for %s %s." % (maybe_warn, numbers, local_or_zulu)
        
    def speak_times(self, sound_thing):
        """Speak the current time, and if set, the alarm clock trigger
time."""
        local = time.localtime()
        zulu = time.gmtime()
        
        strings = [
            self.get_alarm_time_text(),
            "Now",
            text_from_hhmm_string(time.strftime("%H:%M", local)),
            "local time",
            text_from_hhmm_string(time.strftime("%H:%M", zulu)),
            "zulu.",
        ]
        
        sound_thing.speak(' '.join(strings))
    
    def _hhmm_string_appears_valid(self):
        if len(self._alarm_hhmm_time) != 5: return False
        
        for i, char in enumerate(self._alarm_hhmm_time):
            if i == 2 and char != ':': return False
            if i != 2 and not char.isdigit(): return False
        
        if self._alarm_hhmm_time[:2] > '23': return False
        if self._alarm_hhmm_time[3:] > '59': return False
        
        return True
    
    def toggle_next_alarm_in_local_time(self, sound_thing, set_value=None):
        """Control whether the next alarm set (using confirm_alarm_time) is in
zulu or local time, based on the truthiness of set_value. If set_value
is None, toggles _next_alarm_in_local_time from True to False or False
to True. Announce this on the sound_thing."""
        if set_value:
            self._next_alarm_in_local_time = True
        elif set_value is not None:
            self._next_alarm_in_local_time = False
        else:
            self._next_alarm_in_local_time = not self._next_alarm_in_local_time
        
        if self._next_alarm_in_local_time:
            sound_thing.speak("Local time used to set next alarm.")
        else:
            sound_thing.speak("Zulu time (UTC) used to set next alarm.")

    def should_ring(self):
        """Returns truthy iff the alarm should start ringing right now. Should
be checked at least once per minute."""
        if not self._alarm_hhmm_time:
            return False
        
        current_epoch_time = time.time()
        struct_time = time.localtime(current_epoch_time) \
                      if self._alarm_in_local_time \
                      else time.gmtime(current_epoch_time)

        hhmm_string_now = time.strftime("%H:%M", struct_time)
        
        # In a sane world, we could check whether the alarm should ring just
        # by comparing the wall clock's hh:mm readout with the hh:mm string
        # representing the alarm clock ringing time.
        if hhmm_string_now == self._alarm_hhmm_time:
            return True
        
        # ...however, need to do a quick daylight saving check, in case the
        # user requested a time that doesn't exist due to that hour being
        # skipped by DST. This check relies on a bunch of American DST
        # assumptions, so I hope to God no region on Earth uses even dumber
        # DST schemes that I didn't anticipate...
        
        # Skip check if the alarm's in zulu time; no DST there.
        if not self._alarm_in_local_time:
            return False
        
        # Check if DST started by seeing if it's dst now and wasn't
        # dst an hour ago.
        dst_just_started = (struct_time.tm_isdst and
            not time.localtime(current_epoch_time - 3600).tm_isdst)
        
        # If DST just started and the current hh:mm time is after
        # (numerically higher) than the alarm trigger hh:mm, we may
        # have skipped the time the user meant to trigger the alarm
        # clock and we should ring the alarm.
        return dst_just_started and hhmm_string_now <= self._alarm_hhmm_time


class SoundThingie(object):
    """Class responsible for playing only one sound at a time. Typically,
if another sound is played before one is finished, the earlier sound
is cancelled. The update() method must be called periodically for this
object to function. Sounds are played in the priority order:

1. Synthesized text-to-speech (generated and played by text-to-speech subprocess)
2. Alarm clock sound
3. Background pink noise (plays only when no other sounds are playing)
    """
    __slots__ = [
        # Volume 0.0 to 1.0 of background pink noise.
        "_noise_volume_scale",
        
        # Volume 0.0 to 1.0 of alarm clock sound.
        "_alarm_volume_scale",
        
        # PID of text-to-speech process. None when not running.
        "_child_pid",
        
        # String of text to speak. None when there is no text
        # scheduled to speak, or child text-to-speech process already
        # spawned.
        "_text_to_speak",
        
        # Tick (milliseconds) that the text-to-speech is scheduled to start
        # on. Used to fade out other sounds in preparation for text-to-speech.
        # Set to None only when there's no text-to-speech scheduled AND current
        # text-to-speech process has finished.
        "_speak_start_ticks",
        
        # Once the speaking child process ends, set to the tick that
        # the process ended on, to facilitate fading in volume.
        "_speak_end_ticks",
        
        # Tick that the alarm sound is scheduled to start on, used to
        # fade out background pink noise. Set to None when there's no
        # alarm imminently scheduled to ring and there's no alarm
        # sound currently playing.
        "_alarm_start_ticks",
        
        # Once the alarm sound ends, set to the tick the sound ended on.
        "_alarm_end_ticks",
        
        # Pygame sound objects.
        "_alarm_pygame_sound",
        "_noise_pygame_sound",
        
        # Pygame channels used to play alarmclock and pink noise sounds.
        # May be set to None when not applicable.
        "_alarm_pygame_channel",
        "_noise_pygame_channel",
    ]
    
    def __init__(self):
        self._noise_volume_scale = 0.0
        self._alarm_volume_scale = 1.0
        
        self._child_pid = None
        
        self._text_to_speak = None
        self._speak_start_ticks = None
        self._speak_end_ticks = - speak_fade_ms # Hack
        
        self._alarm_start_ticks = None
        self._alarm_end_ticks = - noise_alarm_fade_ms # Hack
        
        # Check that the required sound files exist with at least read
        # permission (pygame silently fails if they don't...)
        try:
            os.close(os.open(alarm_sound_filename, os.O_RDONLY))
            os.close(os.open(pink_noise_filename, os.O_RDONLY))
        except OSError as e:
            raise Exception("Could not load needed sound file: %r" % e)
        
        self._alarm_pygame_sound = pygame.mixer.Sound(alarm_sound_filename)
        self._noise_pygame_sound = pygame.mixer.Sound(pink_noise_filename)
        self._alarm_pygame_sound.set_volume(self._alarm_volume_scale)
        self._noise_pygame_sound.set_volume(self._noise_volume_scale)
        
        self._alarm_pygame_channel = None
        
        # Noise should be playing in background always.
        self._noise_pygame_channel = self._noise_pygame_sound.play(-1)
    
    def update(self):
        """Call periodically to make this object function correctly."""
        
        # Go through and update each member variable
        # (described in __slots__) roughly in order.
        
        t = pygame.time.get_ticks()
        
        # Check that child text-to-speech process, if any, is done.
        if self._child_pid is not None:
            pid, status = os.waitpid(self._child_pid, os.WNOHANG)
            # Should I check for failure? Hope text-to-speech has
            # no critical information.
            if pid != 0:
                assert pid == self._child_pid
                self._child_pid = None
                self._speak_start_ticks = None
                self._speak_end_ticks = t
        
        # If there is text to speak and it's scheduled to start now,
        # start text-to-speech process.
        if self._text_to_speak and self._speak_start_ticks <= t:
            self._start_text_to_speech_process()
            self._text_to_speak = None
        
        # Check if the alarm noise just ended; if so set
        # _alarm_start_ticks, _alarm_end_ticks, and clear the alarm
        # channel to None.
        if self._alarm_pygame_channel is not None:
            if not self._alarm_pygame_channel.get_busy():
                self._alarm_start_ticks = None
                self._alarm_end_ticks = t
                self._alarm_pygame_channel = None
        
        # If the alarm is scheduled to ring and is not already
        # ringing, start the alarm sound.
        alarm_scheduled_now = (
            self._alarm_start_ticks is not None and
            self._alarm_start_ticks <= t
        )
        alarm_ringing = (
            self._alarm_pygame_channel is not None and
            self._alarm_pygame_channel.get_busy()
        )
        if alarm_scheduled_now and not alarm_ringing:
            self._alarm_pygame_channel = self._alarm_pygame_sound.play()

        # Finally, we need to set the actual volumes for the noise and
        # alarm channels, taking into account any fade-in/fade-out effects.
        # Maybe this should have been placed in its own function.
        actual_noise_volume = self.noise_volume()
        actual_alarm_volume = self.alarm_volume()
        
        speak_start = self._speak_start_ticks
        speak_end = self._speak_end_ticks
        alarm_start = self._alarm_start_ticks
        alarm_end = self._alarm_end_ticks
        
        # Check for fade out effects due to imminent start of text-to-speech
        if speak_start is not None:
            s = how_far_between(t, speak_start, speak_start - speak_fade_ms)
            actual_noise_volume *= s
            actual_alarm_volume *= s
        
        # Same, for fade in after end of text-to-speech
        s = how_far_between(t, speak_end, speak_end + speak_fade_ms)
        actual_noise_volume *= s
        actual_alarm_volume *= s
        
        # Now do the same check for the alarm causing the background
        # noise to fade.
        if alarm_start is not None:
            actual_noise_volume *= how_far_between(
                t, alarm_start, alarm_start - noise_alarm_fade_ms)
        
        actual_noise_volume *= how_far_between(
            t, alarm_end, alarm_end + noise_alarm_fade_ms)
        
        # Finally, update the sound volumes for the pygame Sound objects.
        self._alarm_pygame_sound.set_volume(actual_alarm_volume)
        self._noise_pygame_sound.set_volume(actual_noise_volume)
    
    def _start_text_to_speech_process(self):
        """Start a text-to-speech process, possibly killing and replacing the
one currently running. Has no effects on this object's member
variables other than _child_pid -- see main update() function for
other necessary state changes.

        """
        
        assert self._text_to_speak is not None
        
        if self._child_pid is not None:
            os.kill(self._child_pid, SIGINT)
            os.waitpid(self._child_pid, 0)

        self._child_pid = start_text_to_speech_process(self._text_to_speak)
    
    def alarm_busy(self):
        alarm_scheduled_now = self._alarm_start_ticks is not None
        alarm_ringing = (
            self._alarm_pygame_channel is not None and
            self._alarm_pygame_channel.get_busy()
        )
        return alarm_scheduled_now or alarm_ringing
    
    def noise_volume(self, volume=None):
        """Get the noise volume. If an argument is passed, set the noise
volume.

        """
        if volume is not None:
            v = min(1, max(0, volume))
            self._noise_volume_scale = v
        return self._noise_volume_scale
    
    def alarm_volume(self, volume=None):
        """Get the volume used to ring the alarm. If an argument is passed,
set the alarm clock ring volume.

        """
        if volume is not None:
            v = min(1, max(0, volume))
            self._alarm_volume_scale = v
        return self._alarm_volume_scale
    
    def start_alarm_ring(self):
        """Start ringing the alarm clock."""
        # Do this by scheduling the alarm to ring later.
        if self._alarm_start_ticks is None:
            t = pygame.time.get_ticks()
            self._alarm_start_ticks = t + noise_alarm_fade_ms
    
    def start_alarm_test(self):
        """Start the alarm clock test (ring alarm immediately)."""
        self.speak("Testing alarm.")
        t = pygame.time.get_ticks()
        self._alarm_start_ticks = t + 1
    
    def stop_alarm(self):
        """Stop the alarm sound."""
        if self._alarm_pygame_channel is not None:
            self._alarm_pygame_channel.stop()
            self._alarm_start_ticks = None
            # Other state relating to this will be dealt with in update().
    
    def speak(self, text):
        """Schedule some text for text-to-speech."""
        print(text)
        
        t = pygame.time.get_ticks()
        self._text_to_speak = str(text)
        
        # Only set _speak_start_ticks if it's not already set, so that if
        # there's already text-to-speech scheduled or running, we replace
        # the old text-to-speech without delay.
        if self._speak_start_ticks is None:
            self._speak_start_ticks = t + speak_fade_ms

    
def text_from_hhmm_string(string):
    """Convert an "hh:mm" string to a (spoken) text representation."""
    words = []
    
    for i,s in enumerate(string.split(':')):
        digit_table = {
            "0":"zero", "1":"one", "2":"two", "3":"three", "4":"four",
            "5":"five", "6":"six", "7":"seven", "8":"eight", "9":"nine",
        }
        
        txt = None
        
        if i == 1:
            special_case_table = {
                "00":"hundred",
            }
        elif i == 0:
            special_case_table = {
                "10":"ten",
                "11":"eleven",
                "12":"twelve",
            }
        txt = special_case_table.get(s)
        
        if txt:
            words.append(txt)
        else:
            words += map(digit_table.get, s)
    
    return ' '.join(words)


def start_text_to_speech_process(text):
    """Start a text-to-speech process speaking the string passed in the
`text` parameter. Return the process's PID.

    """
    read_fd, write_fd = os.pipe()
    pid = os.fork()
    
    # Child process, run text-to-speech script
    if pid == 0:
        os.close(write_fd)
        os.dup2(read_fd, 0)
        os.close(read_fd)
        os.execvp(text_to_speech_args[0], text_to_speech_args)
    # Parent process: pipe text to child's stdin.
    else:
        os.write(write_fd, text)
        os.close(read_fd)
        os.close(write_fd)
    
    return pid


class PublicFunctions(object):
    """Collection of functions that the user can bind to keyboard actions."""
    
    def __init__(pf, sound, alarm):
        """Pass in the SoundThingie and the Alarm objects."""
        pf.say_hello_world = lambda: sound.speak("Hello, world!")
    
        pf.input0 = lambda: (alarm.input_digit('0'), sound.speak('0'))
        pf.input1 = lambda: (alarm.input_digit('1'), sound.speak('1'))
        pf.input2 = lambda: (alarm.input_digit('2'), sound.speak('2'))
        pf.input3 = lambda: (alarm.input_digit('3'), sound.speak('3'))
        pf.input4 = lambda: (alarm.input_digit('4'), sound.speak('4'))
        pf.input5 = lambda: (alarm.input_digit('5'), sound.speak('5'))
        pf.input6 = lambda: (alarm.input_digit('6'), sound.speak('6'))
        pf.input7 = lambda: (alarm.input_digit('7'), sound.speak('7'))
        pf.input8 = lambda: (alarm.input_digit('8'), sound.speak('8'))
        pf.input9 = lambda: (alarm.input_digit('9'), sound.speak('9'))
        pf.confirm_alarm = lambda: alarm.confirm_input(sound)
        pf.confirm_alarm_hour = lambda: alarm.confirm_input_hour(sound)
        
        pf.silence_alarm = sound.stop_alarm
        pf.cancel_alarm = lambda: (alarm.cancel(sound), sound.stop_alarm())
        
        pf.noise_volume_down = lambda: \
            sound.noise_volume(sound.noise_volume() - volume_adjust_step)
        pf.noise_volume_up = lambda: \
            sound.noise_volume(sound.noise_volume() + volume_adjust_step)
        pf.alarm_volume_down = lambda: \
            sound.alarm_volume(sound.alarm_volume() - volume_adjust_step)
        pf.alarm_volume_up = lambda: \
            sound.alarm_volume(sound.alarm_volume() + volume_adjust_step)
        
        # Volume adjust and cancel by default act on the alarm sound
        # if it's currently playing; otherwise, they adjust the
        # background noise volume and the set alarm clock trigger
        # time, respectively.
        alarm_busy = sound.alarm_busy
        pf.volume_up = lambda: \
            (pf.alarm_volume_up if alarm_busy() else pf.noise_volume_up)()
        pf.volume_down = lambda: \
            (pf.alarm_volume_down if alarm_busy() else pf.noise_volume_down)()
        pf.cancel = lambda: \
            (sound.stop_alarm if alarm_busy() else pf.cancel_alarm)()
        
        pf.time = lambda: alarm.speak_times(sound)
        
        pf.toggle_next_alarm_in_local_time = \
            lambda: alarm.toggle_next_alarm_in_local_time(sound)
        
        pf.toggle_local_time = pf.toggle_next_alarm_in_local_time
        
        pf.test_alarm = lambda: \
            (sound.stop_alarm if alarm_busy() else sound.start_alarm_test)()

        pf.use_local_time = \
            lambda: alarm.toggle_next_alarm_in_local_time(sound, True)
        pf.use_zulu_time = \
            lambda: alarm.toggle_next_alarm_in_local_time(sound, False)
        
        pf.quit = lambda: sys.exit(0)
        
        pf.debug_alarm_should_ring = lambda: sys.stdout.write(
            "Alarm should ring.\n" if alarm.should_ring() else "no.\n")
        
        pf.debug_crash = lambda: \
            (sys.stderr.write("debug_crash\n"), os.abort())


def make_key_char_to_function_dict(pf):
    """Given the PublicFunctions collection of user-facing functions,
return a dict that maps keyboard characters to PublicFunctions'
callables. Provide the default such dict first, then modify it by
parsing the keybind file.

keybind syntax:

Lines starting with '#' or ';' (no whitespace before) are comments.

Other lines should be a string of whitespace separated tokens.

First token on line should name a callable in pf (PublicFunctions).

Each subsequent token should either be a single character (named
characters are mapped to the callable named at the start of the line),
or a 2+ digit hex number.

    """
    the_dict = {
        'H':pf.say_hello_world,
    
        '0':pf.input0,
        '1':pf.input1,
        '2':pf.input2,
        '3':pf.input3,
        '4':pf.input4,
        '5':pf.input5,
        '6':pf.input6,
        '7':pf.input7,
        '8':pf.input8,
        '9':pf.input9,
        
        '\r':pf.confirm_alarm,
        '\n':pf.confirm_alarm,
        'c':pf.confirm_alarm,
        
        '\x09':pf.confirm_alarm_hour,
        'h':pf.confirm_alarm_hour,
        
        '\x7f':pf.cancel,
        '\x07':pf.cancel,
        '\x08':pf.cancel,
        'x':pf.cancel,
        
        's':pf.silence_alarm,
        '\x1b':pf.silence_alarm,
        
        '+':pf.volume_up,
        '=':pf.volume_up,
        'u':pf.volume_up,
        ']':pf.volume_up,
        
        '-':pf.volume_down,
        'd':pf.volume_down,
        '[':pf.volume_down,
        
        'U':pf.alarm_volume_up,
        '}':pf.alarm_volume_up,
        'D':pf.alarm_volume_down,
        '{':pf.alarm_volume_down,
        
        '\x15':pf.noise_volume_up,
        '\x04':pf.noise_volume_down,
        
        't':pf.time,
        '/':pf.time,
        '?':pf.time,
        
        'z':pf.use_zulu_time,
        'l':pf.use_local_time,
        '*':pf.toggle_local_time,
        
        '.':pf.test_alarm,
        'T':pf.test_alarm,
        
        'Q':pf.quit,
        '\x11':pf.quit,
        '\x17':pf.quit,
        
        '\x01':pf.debug_alarm_should_ring,
        '\x1c':pf.debug_crash,
    }
    
    try:
        f = open(keybind_filename, 'r')
    except Exception as e:
        sys.stderr.write("Could not open %s: %r\n" % (keybind_filename, e))
        return the_dict
    
    line_number = 0
    for line in f:
        line_number += 1
        
        if line.startswith('#') or line.startswith(';'): continue
        
        tokens = line.split()
        
        if len(tokens) < 1: continue
        
        callback = pf.__dict__.get(tokens[0])
        if callback is None:
            sys.stderr.write("Line %d: No such callable `%s`.\n" % 
                (line_number, tokens[0])
            )
            continue
        
        for token in tokens[1:]:
            if len(token) == 1:
                the_dict[token] = callback
            else:
                try:
                    the_dict[chr(int(token, 16))] = callback
                except Exception as e:
                    sys.stderr.write("Line %d: Invalid token `%s`: %r.\n" %
                        (line_number, token, e))
                    
    return the_dict


def start_supervisor_process():
    """Spawns a supervisor process that watches this process and tries to
raise an audible alarm in case the main process crashes. Implement
this using fork, with the parent being the supervisor and the child
the main process. This means that the PID of the process will appear
to change after this function returns.

Catch BaseException everywhere because I want the function to try to
work no matter what, even if things aren't functioning correctly.

    """
    try:
        pid = os.fork()
        if pid == 0:
            return # Child process
    except BaseException as e:
        supervisor_alarm()
        os._exit(1)
    
    pid_result, status = os.waitpid(pid, 0)
    
    if status == 0:
        os._exit(0)
    
    try:
        sys.stderr.write("Exit status %d.\n" % status)
    except BaseException as e:
        pass

    supervisor_alarm()
    os._exit(1)


def supervisor_alarm():
    """Function used by the supervisor process to try to make an audible
alarm in case the main process crashes.

    """
    try:
        # First, try to raise the alarm without using too much
        # potentially broken stuff.  240 Hz seems audible without
        # being too alarming of a sound.
        os.system("sleep 3 && speaker-test -t sine -f 240 -l 1 &")
    except BaseException as e:
        pass
    
    # Now use text-to-speech to explain that we messed up.
    try:
        start_text_to_speech_process("Alarm clock process crashed.")
    except BaseException as e:
        pass
    
    # Play the alarm clock sound.
    time.sleep(10)
    import pygame
    pygame.mixer.init()
    channel = pygame.mixer.Sound(alarm_sound_filename).play()
    
    while channel.get_busy(): time.sleep(1)
    

def main():
    """Initialize Pygame. Instantiate the singleton objects for managing
playing sounds, tracking the alarm clock trigger time, and mapping
user input to actions. Then run the main loop.

    """
    start_supervisor_process()
    
    import pygame as pygame_
    global pygame
    pygame = pygame_
    
    pygame.init()
    pygame.mixer.init()
    
    sound = SoundThingie()
    alarm = Alarm()
    
    pf = PublicFunctions(sound, alarm)
    key_char_to_function_dict = make_key_char_to_function_dict(pf)
    
    pygame.display.set_caption("pinkalarm")
    disp = pygame.display.set_mode((200,200))
    
    # Main loop -- need to update the SoundThingie object, check if the
    # alarm needs to ring, and check user keyboard input and perform
    # the corresponding actions.
    while 1:
        time.sleep(0.008)
        sound.update()
        
        if alarm.should_ring():
            sound.start_alarm_ring()
        
        for e in pygame.event.get():
            if e.type == pygame.QUIT:
                return
            if e.type == pygame.KEYDOWN and e.unicode:
                callback = key_char_to_function_dict.get(e.unicode)
                if callback is not None:
                    callback()
                elif ord(e.unicode) < 128:
                    sys.stderr.write("No action for keystroke \\x%02x: %s\n" %
                        (ord(e.unicode), str(e.unicode)))
                
if __name__ == "__main__":
    main()
